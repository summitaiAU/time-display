name: EAS Update (Expo)

on:
  push:
    branches: [ "main" ]

jobs:
  eas-update:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install tools
        run: npm install -g eas-cli@latest json

      # Update only dependencies in package.json, preserving everything else
      - name: Update dependencies in package.json
        run: |
          # Update dependencies while preserving everything else
          json -I -f package.json -e 'this.dependencies.expo = "~52.0.0"'
          json -I -f package.json -e 'this.dependencies["expo-updates"] = "~0.24.8"'
          json -I -f package.json -e 'this.dependencies.react = "19.0.0"'
          json -I -f package.json -e 'this.dependencies["react-native"] = "0.73.2"'
          json -I -f package.json -e 'this.dependencies["react-native-safe-area-context"] = "4.8.2"'
          
          # Add dev dependencies for Babel
          json -I -f package.json -e 'this.devDependencies = this.devDependencies || {}'
          json -I -f package.json -e 'this.devDependencies["@babel/plugin-transform-export-namespace-from"] = "^7.23.4"'
          json -I -f package.json -e 'this.devDependencies["babel-preset-expo"] = "~10.0.0"'

      # Update babel.config.js to handle Flow syntax
      - name: Update babel.config.js
        run: |
          echo 'module.exports = function(api) {
            api.cache(true);
            return {
              presets: ["babel-preset-expo"],
              plugins: ["@babel/plugin-transform-export-namespace-from"]
            };
          };' > babel.config.js

      # Update metro.config.js for Expo compatibility
      - name: Update metro.config.js
        run: |
          echo 'const { getDefaultConfig } = require("expo/metro-config");
          
          const config = getDefaultConfig(__dirname);
          
          module.exports = config;' > metro.config.js

      # Update app.json with Expo requirements
      - name: Update app.json
        run: |
          # Extract existing name, slug, and owner if they exist
          EXISTING_NAME=$(json -f app.json 'expo.name' 2>/dev/null || echo "Time Display")
          EXISTING_SLUG=$(json -f app.json 'expo.slug' 2>/dev/null || echo "time-display")
          
          json -I -f app.json -e 'this.expo = this.expo || {}'
          json -I -f app.json -e 'this.expo.name = this.expo.name || "'$EXISTING_NAME'"'
          json -I -f app.json -e 'this.expo.slug = this.expo.slug || "'$EXISTING_SLUG'"'
          json -I -f app.json -e 'this.expo.owner = "${{ secrets.EXPO_USERNAME }}"'
          json -I -f app.json -e 'this.expo.version = this.expo.version || "1.0.0"'
          json -I -f app.json -e 'this.expo.runtimeVersion = {"policy": "sdkVersion"}'
          json -I -f app.json -e 'this.expo.extra = this.expo.extra || {}'
          json -I -f app.json -e 'this.expo.extra.eas = this.expo.extra.eas || {}'
          json -I -f app.json -e 'this.expo.extra.eas.projectId = this.expo.extra.eas.projectId || "ae646493-acc0-49e6-92b8-62f14fe11797"'
          json -I -f app.json -e 'this.expo.updates = this.expo.updates || {}'
          json -I -f app.json -e 'this.expo.updates.url = this.expo.updates.url || "https://u.expo.dev/ae646493-acc0-49e6-92b8-62f14fe11797"'

      # Update or create eas.json
      - name: Update eas.json
        run: |
          if [ -f eas.json ]; then
            # Update existing eas.json
            json -I -f eas.json -e 'this.cli = this.cli || {}'
            json -I -f eas.json -e 'this.cli.version = ">=3.13.0"'
          else
            # Create if it doesn't exist
            echo '{
              "cli": {
                "version": ">=3.13.0"
              },
              "build": {
                "development": {
                  "developmentClient": true,
                  "distribution": "internal"
                },
                "preview": {
                  "distribution": "internal"
                },
                "production": {}
              },
              "submit": {
                "production": {}
              }
            }' > eas.json
          fi

      # Ensure assets directory exists with required files
      - name: Setup assets
        run: |
          mkdir -p assets
          
          # Only download assets if they don't exist
          if [ ! -f assets/icon.png ]; then
            curl -s https://raw.githubusercontent.com/expo/expo/master/templates/expo-template-blank/assets/icon.png -o assets/icon.png
          fi
          if [ ! -f assets/splash.png ]; then
            curl -s https://raw.githubusercontent.com/expo/expo/master/templates/expo-template-blank/assets/splash.png -o assets/splash.png
          fi
          if [ ! -f assets/adaptive-icon.png ]; then
            curl -s https://raw.githubusercontent.com/expo/expo/master/templates/expo-template-blank/assets/adaptive-icon.png -o assets/adaptive-icon.png
          fi
          if [ ! -f assets/favicon.png ]; then
            curl -s https://raw.githubusercontent.com/expo/expo/master/templates/expo-template-blank/assets/favicon.png -o assets/favicon.png
          fi

      # Install dependencies
      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      # Login to Expo
      - name: Expo Login
        run: CI=1 npx expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}
        
      # Initialize EAS Project
      - name: Initialize EAS Project
        run: npx eas init --non-interactive --force

      # Run EAS Update
      - name: EAS Update
        run: npx eas update --branch main --message "GitHub Action update" --non-interactive
